<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        #group-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            padding: 10px;
            background-color: #f1f1f1;
            border-bottom: 1px solid #ccc;
        }
        #group-buttons button {
            padding: 10px;
            border: none;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }
        #chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            box-sizing: border-box;
        }
        .chat {
            border: 1px solid #ccc;
            margin: 5px;
            padding: 10px;
        }
        .message {
            margin: 5px 0;
            padding: 10px;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
            max-width: 70%;
            position: relative;
        }
        .message.me {
            background-color: #d3f9d8;
            margin-left: auto;
            text-align: right;
        }
        .message.other {
            background-color: #f1f1f1;
            text-align: left;
        }
        .message p {
            margin: 0;
            font-size: 12px;
            color: #666;
        }
        .message .text {
            margin: 5px 0;
            word-break: break-word;
        }
        .message .file {
            margin-top: 5px;
            word-break: break-word;
        }
        #username-input, #chat-controls {
            padding: 10px;
            background: #f1f1f1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #username-input {
            display: none;
        }
        #username-input input[type="text"], #chat-controls input[type="text"] {
            width: calc(100% - 80px);
            padding: 5px;
        }
        #chat-controls {
            display: none;
        }
    </style>
</head>
<body>
    <div id="username-input">
        <label for="username">Seu Nome: </label>
        <input type="text" id="username" placeholder="Digite seu nome">
        <button onclick="setUsername()">Salvar Nome</button>
    </div>

    <div id="group-buttons">
        <button onclick="joinChat('chat1')">Grupo 1</button>
        <button onclick="joinChat('chat2')">Grupo 2</button>
        <button onclick="joinChat('chat3')">Grupo 3</button>
        <button onclick="joinChat('chat4')">Grupo 4</button>
        <button onclick="joinChat('chat5')">Grupo 5</button>
        <button onclick="joinChat('chat6')">Grupo 6</button>
    </div>

    <div id="chat-container"></div>

    <div id="chat-controls">
        <input type="file" id="file-input" />
        <input type="text" id="message-input" placeholder="Digite sua mensagem">
        <button onclick="sendMessage()">Enviar</button>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentChat = null;
        let username = localStorage.getItem('username') || '';

        document.addEventListener('DOMContentLoaded', () => {
            if (username) {
                document.getElementById('username-input').style.display = 'none';
                document.getElementById('chat-controls').style.display = 'flex';
            } else {
                document.getElementById('username-input').style.display = 'flex';
            }
        });

        function setUsername() {
            const input = document.getElementById('username');
            username = input.value.trim();
            if (username) {
                localStorage.setItem('username', username);
                input.disabled = true;
                document.getElementById('username-input').style.display = 'none';
                document.getElementById('chat-controls').style.display = 'flex';
            }
        }

        socket.on('newMessage', (message) => {
            if (currentChat) {
                appendMessage(message);
            }
        });

        socket.on('loadChatMessages', (messages) => {
            const chatDiv = document.getElementById('chat-container');
            chatDiv.innerHTML = '';
            messages.forEach(appendMessage);
            chatDiv.scrollTop = chatDiv.scrollHeight;
        });

        function appendMessage(message) {
            const chatDiv = document.getElementById('chat-container');
            const msgDiv = document.createElement('div');
            msgDiv.className = `message ${message.sender === username ? 'me' : 'other'}`;
            const textContent = message.text ? `<div class="text">${message.text}</div>` : '';
            const fileContent = message.file ? `<div class="file">${renderFile(message.file)}</div>` : '';
            msgDiv.innerHTML = `${textContent}${fileContent}<p>${message.sender}</p>`;
            chatDiv.appendChild(msgDiv);
            chatDiv.scrollTop = chatDiv.scrollHeight;
        }

        function renderFile(file) {
            if (file.type.startsWith('image/')) {
                return `<img src="${file.url}" alt="${file.name}" style="max-width: 100%; max-height: 200px;">`;
            } else if (file.type.startsWith('video/')) {
                return `<video controls style="max-width: 100%; max-height: 200px;"><source src="${file.url}" type="${file.type}">Your browser does not support the video tag.</video>`;
            } else if (file.type.startsWith('audio/')) {
                return `<audio controls style="width: 100%;"><source src="${file.url}" type="${file.type}">Your browser does not support the audio element.</audio>`;
            } else {
                return `<a href="${file.url}" download="${file.name}">${file.name}</a>`;
            }
        }

        function sendMessage() {
            const input = document.getElementById('message-input');
            const fileInput = document.getElementById('file-input');
            const message = input.value.trim();
            const file = fileInput.files[0];

            if (message || file) {
                const fileData = file ? {
                    name: file.name,
                    type: file.type,
                    url: URL.createObjectURL(file)
                } : null;

                const data = { chatId: currentChat, message, sender: username, file: fileData };
                socket.emit('sendMessage', data);
                input.value = '';
                fileInput.value = '';
                input.focus();
            }
        }

        function joinChat(chatId) {
            if (currentChat) {
                socket.emit('leaveChat', currentChat);
            }
            currentChat = chatId;
            socket.emit('joinChat', chatId);
        }
    </script>
</body>
</html>































const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const fs = require('fs');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const PORT = 3000;
const CHATS_FILE = path.join(__dirname, 'chats.json');

app.use(express.static('public'));

function readChats() {
    if (fs.existsSync(CHATS_FILE)) {
        return JSON.parse(fs.readFileSync(CHATS_FILE, 'utf8'));
    } else {
        return {};
    }
}

function writeChats(chats) {
    fs.writeFileSync(CHATS_FILE, JSON.stringify(chats, null, 2));
}

io.on('connection', (socket) => {
    console.log(`Usuário conectado: ${socket.id}`);

    socket.on('joinChat', (chatId) => {
        socket.join(chatId);
        console.log(`Usuário ${socket.id} entrou no chat ${chatId}`);
        const chats = readChats();
        const messages = chats[chatId] ? chats[chatId].messages : [];
        socket.emit('loadChatMessages', messages);
    });

    socket.on('sendMessage', (data) => {
        const { chatId, message, sender, file } = data;
        const chats = readChats();

        if (!chats[chatId]) {
            chats[chatId] = { messages: [], users: [] };
        }

        const newMessage = {
            id: `${chatId}-${Date.now()}`,
            text: message || '',
            sender,
            timestamp: new Date(),
            file: file || null,
            read: false,
        };

        chats[chatId].messages.push(newMessage);
        writeChats(chats);
        io.to(chatId).emit('newMessage', newMessage);
    });

    socket.on('disconnect', () => {
        console.log('Usuário desconectado');
    });
});

server.listen(PORT, () => {
    console.log(`Servidor rodando em http://localhost:${PORT}`);
});
